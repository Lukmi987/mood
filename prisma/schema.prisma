// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  clerkId   String         @unique
  email     String         @unique
  entries   JournalEntry[]
  analyses Analysis[]
}

model JournalEntry {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  user    User   @relation(fields: [userId], references: [id])

  content String @db.Text

  analysis Analysis?


//compound index
  @@unique([userId, id])
}

model Analysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entryId String @unique //This directly marks the entryId column as unique.
  //It ensures that each entryId value must be unique, which enforces the one-to-one relationship between JournalEntry and Analysis.
  entry   JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  mood     String
  summary  String  @db.Text
  color    String
  negative Boolean
  subject String
  sentimentScore Float @default(0)


  @@index([userId])
  //  @@unique([entryId])  Using @@unique([entryId]) (Model-Level) This defines a unique constraint at the model level.
 //The effect is the same as @unique on entryId, but this format is useful when:
 //   You want to combine multiple fields into a composite unique constraint, e.g.:
  //@@unique([entryId, userId]) This ensures that each combination of entryId and userId must be unique, but neither field alone has to be unique.
}
