API Routes in Next.js
Server-Side Functionality:
API routes in Next.js are special server-side functions used to handle backend logic directly within your Next.js app. They are not part of the client-side React app but run on the server when a request is made.

Structure:
API routes are created in the pages/api directory. Each file in this directory maps to an API endpoint. For example:

pages/api/hello.js → /api/hello
----------------------------------
Key Points:
Default Behavior in the app Directory:

All components in the app directory are Server Components unless explicitly specified as Client Components.

How to Make It a Client Component: If you want this component to run on the client, you need to explicitly declare it as
 a Client Component by adding the following directive at the top of the file: 'use client';


======================
Layout and Page Structure
2. Role of layout.tsx
layout.tsx: This file acts as a wrapper for all pages contained within the (dashboard) directory. It can include shared components such as headers, footers, or sidebars, and it uses the children prop to render the content of any nested pages.
3. Automatic Page Loading
When you navigate to the route corresponding to app/(dashboard)/journal/page.tsx, Next.js automatically loads this page within the context of the layout.tsx. Here’s how it works:
Routing Mechanism: Next.js uses a file-based routing system. When you access the /dashboard/journal route, Next.js looks for a corresponding layout and page.
Rendering Process: The framework first renders layout.tsx, which includes any static components defined in it. Then, it automatically injects the content from page.tsx into the layout’s children area.


Revalidation cache

===================
LangChain is a framework for developing applications powered by large language models (LLMs).
It is like SDK for LLMs
https://js.langchain.com/docs/introduction/


**PRISMA commands
npx prisma db push // to update db 
npx prisma studio // to si visual structure 

===============================================
Queries
SQL Query	                                                Prisma Equivalent
SELECT * FROM users WHERE email = 'test@example.com';	    prisma.user.findUnique({ where: { email: "test@example.com" } })
INSERT INTO users (email) VALUES ('test@example.com');	    prisma.user.create({ data: { email: "test@example.com" } })
UPDATE users SET email = 'new@example.com' WHERE id = 1;	prisma.user.update({ where: { id: 1 }, data: { email: "new@example.com" } })
DELETE FROM users WHERE id = 1;	                            prisma.user.delete({ where: { id: 1 } })

Constraints
SQL	            Prisma
PRIMARY KEY 	@id
NOT NULL	    Fields are required unless marked ? (optional)
UNIQUE	        @unique on a field or @@unique([field]) for multiple fields
FOREIGN         KEY	@relation(fields: [fk], references: [id])
INDEX	        @@index([field])


Relationships (1:1, 1:M, M:N)
Relationship	SQL (Java/Hibernate)	    Prisma
One-to-One	@OneToOne + @JoinColumn	        @relation(fields: [foreignKey], references: [id]) + @unique on foreign key
One-to-Many	@OneToMany + @JoinColumn	    Foreign key on the "many" side
Many-to-Many	@ManyToMany	                Prisma creates a junction table automatically